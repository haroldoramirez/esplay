{"version":3,"sources":["angular-bootstrap-calendar.js","app.js","services/moment.js","services/calendarHelper.js","services/calendarConfig.js","filters/truncateEventTitle.js","filters/eventCountBadgeTotal.js","directives/mwlCollapseFallback.js","directives/mwlCalendarYear.js","directives/mwlCalendarWeek.js","directives/mwlCalendarSlideBox.js","directives/mwlCalendarMonth.js","directives/mwlCalendarDay.js","directives/mwlCalendar.js"],"names":["window","angular","module","constant","moment","service","calendarConfig","isISOWeekBasedOnLocale","startOf","day","isISOWeek","userValue","isDefined","getEventsInPeriod","calendarDate","period","allEvents","startPeriod","endPeriod","endOf","filter","event","self","eventIsInPeriod","starts_at","ends_at","this","getMonthNames","months","i","push","Date","format","dateFormats","month","getWeekDayNames","short","useISOWeek","weekdays","startDay","weekDay","eventStart","eventEnd","periodStart","periodEnd","isAfter","isBefore","isSame","getYearView","events","currentDay","grid","eventsInPeriod","row","j","monthIndex","length","add","subtract","toDate","label","shift","isToday","date","getMonthView","getWeekDayIndex","startOfMonth","dateOffset","numberOfDaysInMonth","buildRow","Array","eventsWithIds","map","index","$id","weekdayIndex","prefillMonth","clone","inMonth","isPast","isFuture","isWeekend","indexOf","postfillMonth","getWeekView","beginningOfWeek","endOfWeek","columns","weekDays","currentWeekDayIndex","getDay","eventsSorted","offset","span","weekViewStart","weekViewEnd","diff","daySpan","dayOffset","getDayView","dayStartHour","dayEndHour","dayHeight","calendarStart","calendarEnd","calendarHeight","dayHeightMultiplier","buckets","top","height","diffStart","left","cannotFitInABucket","forEach","bucket","bucketIndex","canFitInThisBucket","bucketItem","toggleEventBreakdown","view","rowIndex","cellIndex","closeAllOpenItems","isOpened","cell","openEvents","isCellOpened","provider","defaultDateFormats","hour","defaultTitleFormats","week","year","configProvider","configureDateFormats","formats","extend","configureTitleFormats","$get","titleFormats","string","boxHeight","substr","incrementsBadgeTotal","directive","$injector","has","restrict","controller","$scope","$attrs","$element","unbindWatcher","$watch","mwlCollapseFallback","shouldCollapse","addClass","removeClass","unbindDestroy","$on","templateUrl","require","scope","eventClick","eventEditClick","eventDeleteClick","editEventHtml","deleteEventHtml","autoOpen","timespanClick","$sce","$timeout","calendarHelper","eventCountBadgeTotalFilter","updateView","firstRun","monthClicked","yearIndex","monthClickedFirstRun","handler","drillDown","calendarCtrl","changeView","link","element","attrs","useIsoWeek","replace","isOpen","elm","ctrls","isMonthView","isYearView","dayClicked","dayClickedFirstRun","highlightEvent","shouldAddClass","highlightClass","dayContainsEvent","e","type","eventLabel","timeLabel","dayViewStart","dayViewEnd","dayViewSplit","hours","parseInt","days","dayCounter","control","weekTitleLabel","titleFunctions","newDay","prev","next","getTitle","firstRunWatcher","locale","originalView","copy","unbindDestroyListener"],"mappings":"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","file":"angular-bootstrap-calendar.min.js","sourcesContent":["(function (window, angular) {\n    'use strict';\n    angular.module('mwl.calendar', []);\n    'use strict';\n    /**\n * @ngdoc service\n * @name angularBootstrapCalendarApp.moment\n * @description\n * # moment\n * Constant in the angularBootstrapCalendarApp.\n */\n    angular.module('mwl.calendar').constant('moment', window.moment);\n    'use strict';\n    /**\n * @ngdoc service\n * @name angularBootstrapCalendarApp.calendarHelper\n * @description\n * # calendarHelper\n * Service in the angularBootstrapCalendarApp.\n */\n    angular.module('mwl.calendar').service('calendarHelper', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            var self = this;\n            function isISOWeekBasedOnLocale() {\n                return moment().startOf('week').day() === 1;\n            }\n            function isISOWeek(userValue) {\n                //If a manual override has been set in the directive, use that\n                if (angular.isDefined(userValue)) {\n                    return userValue;\n                }\n                //Otherwise fallback to the locale\n                return isISOWeekBasedOnLocale();\n            }\n            function getEventsInPeriod(calendarDate, period, allEvents) {\n                var startPeriod = moment(calendarDate).startOf(period);\n                var endPeriod = moment(calendarDate).endOf(period);\n                return allEvents.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                });\n            }\n            this.getMonthNames = function () {\n                var months = [];\n                for (var i = 0; i <= 11; i++) {\n                    months.push(moment(new Date(2014, i)).format(calendarConfig.dateFormats.month));\n                }\n                return months;\n            };\n            this.getWeekDayNames = function (short, useISOWeek) {\n                var weekdays = [];\n                var startDay = isISOWeek(useISOWeek) ? 22 : 21;\n                for (var i = 0; i <= 6; i++) {\n                    weekdays.push(moment(new Date(2014, 8, startDay + i)).format(calendarConfig.dateFormats.weekDay));\n                }\n                return weekdays;\n            };\n            this.eventIsInPeriod = function (eventStart, eventEnd, periodStart, periodEnd) {\n                eventStart = moment(eventStart);\n                eventEnd = moment(eventEnd);\n                periodStart = moment(periodStart);\n                periodEnd = moment(periodEnd);\n                return eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd) || eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd) || eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd) || eventStart.isSame(periodStart) || eventEnd.isSame(periodEnd);\n            };\n            this.getYearView = function (events, currentDay) {\n                var grid = [];\n                var months = self.getMonthNames();\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n                for (var i = 0; i < 3; i++) {\n                    var row = [];\n                    for (var j = 0; j < 4; j++) {\n                        var monthIndex = 12 - months.length;\n                        var startPeriod = new Date(moment(currentDay).format('YYYY'), monthIndex, 1);\n                        var endPeriod = moment(startPeriod).add(1, 'month').subtract(1, 'second').toDate();\n                        row.push({\n                            label: months.shift(),\n                            monthIndex: monthIndex,\n                            isToday: moment(startPeriod).startOf('month').isSame(moment().startOf('month')),\n                            events: eventsInPeriod.filter(function (event) {\n                                return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                            }),\n                            date: moment(startPeriod).startOf('month')\n                        });\n                    }\n                    grid.push(row);\n                }\n                return grid;\n            };\n            this.getMonthView = function (events, currentDay, useISOWeek) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n                var dateOffset = isISOWeek(useISOWeek) ? 1 : 0;\n                var startOfMonth = moment(currentDay).startOf('month');\n                var numberOfDaysInMonth = moment(currentDay).endOf('month').date();\n                var grid = [];\n                var buildRow = new Array(7);\n                var eventsWithIds = eventsInPeriod.map(function (event, index) {\n                    event.$id = index;\n                    return event;\n                });\n                function getWeekDayIndex() {\n                    var day = startOfMonth.day() - dateOffset;\n                    if (day < 0) {\n                        day = 6;\n                    }\n                    return day;\n                }\n                for (var i = 1; i <= numberOfDaysInMonth; i++) {\n                    if (i === 1) {\n                        var weekdayIndex = getWeekDayIndex(startOfMonth);\n                        var prefillMonth = startOfMonth.clone();\n                        while (weekdayIndex > 0) {\n                            weekdayIndex--;\n                            prefillMonth = prefillMonth.subtract(1, 'day');\n                            buildRow[weekdayIndex] = {\n                                label: prefillMonth.date(),\n                                date: prefillMonth.clone(),\n                                inMonth: false,\n                                isPast: moment().startOf('day').isAfter(prefillMonth),\n                                isToday: moment().startOf('day').isSame(prefillMonth),\n                                isFuture: moment().startOf('day').isBefore(prefillMonth),\n                                events: []\n                            };\n                        }\n                    }\n                    buildRow[getWeekDayIndex(startOfMonth)] = {\n                        label: startOfMonth.date(),\n                        inMonth: true,\n                        isPast: moment().startOf('day').isAfter(startOfMonth),\n                        isToday: moment().startOf('day').isSame(startOfMonth),\n                        isFuture: moment().startOf('day').isBefore(startOfMonth),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(moment(startOfMonth).day()) > -1,\n                        date: startOfMonth.clone(),\n                        events: eventsWithIds.filter(function (event) {\n                            return self.eventIsInPeriod(event.starts_at, event.ends_at, startOfMonth.clone().startOf('day'), startOfMonth.clone().endOf('day'));\n                        })\n                    };\n                    if (i === numberOfDaysInMonth) {\n                        weekdayIndex = getWeekDayIndex(startOfMonth);\n                        var postfillMonth = startOfMonth.clone();\n                        while (weekdayIndex < 6) {\n                            weekdayIndex++;\n                            postfillMonth = postfillMonth.add(1, 'day');\n                            buildRow[weekdayIndex] = {\n                                label: postfillMonth.date(),\n                                date: postfillMonth.clone(),\n                                inMonth: false,\n                                isPast: moment().startOf('day').isAfter(postfillMonth),\n                                isToday: moment().startOf('day').isSame(postfillMonth),\n                                isFuture: moment().startOf('day').isBefore(postfillMonth),\n                                events: []\n                            };\n                        }\n                    }\n                    if (getWeekDayIndex(startOfMonth) === 6 || i === numberOfDaysInMonth) {\n                        grid.push(buildRow);\n                        buildRow = new Array(7);\n                    }\n                    startOfMonth = startOfMonth.add(1, 'day');\n                }\n                return grid;\n            };\n            this.getWeekView = function (events, currentDay, useISOWeek) {\n                var dateOffset = isISOWeek(useISOWeek) ? 1 : 0;\n                var columns = new Array(7);\n                var weekDays = self.getWeekDayNames(false, useISOWeek);\n                var currentWeekDayIndex = currentDay.getDay();\n                var beginningOfWeek, endOfWeek, i, date;\n                for (i = currentWeekDayIndex; i >= 0; i--) {\n                    date = moment(currentDay).subtract(currentWeekDayIndex - i, 'days').add(dateOffset, 'day').toDate();\n                    columns[i] = {\n                        weekDay: weekDays[i],\n                        day: moment(date).format('D'),\n                        date: moment(date).format(calendarConfig.dateFormats.day),\n                        isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n                        isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n                        isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(moment(date).day()) > -1\n                    };\n                    if (i === 0) {\n                        beginningOfWeek = date;\n                    } else if (i === 6) {\n                        endOfWeek = date;\n                    }\n                }\n                for (i = currentWeekDayIndex + 1; i < 7; i++) {\n                    date = moment(currentDay).add(i - currentWeekDayIndex, 'days').add(dateOffset, 'day').toDate();\n                    columns[i] = {\n                        weekDay: weekDays[i],\n                        day: moment(date).format('D'),\n                        date: moment(date).format(calendarConfig.dateFormats.day),\n                        isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n                        isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n                        isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(moment(date).day()) > -1\n                    };\n                    if (i === 0) {\n                        beginningOfWeek = date;\n                    } else if (i === 6) {\n                        endOfWeek = date;\n                    }\n                }\n                endOfWeek = moment(endOfWeek).endOf('day').toDate();\n                beginningOfWeek = moment(beginningOfWeek).startOf('day').toDate();\n                var eventsSorted = events.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, beginningOfWeek, endOfWeek);\n                }).map(function (event) {\n                    var eventStart = moment(event.starts_at).startOf('day');\n                    var eventEnd = moment(event.ends_at).startOf('day');\n                    var weekViewStart = moment(beginningOfWeek).startOf('day');\n                    var weekViewEnd = moment(endOfWeek).startOf('day');\n                    var offset, span;\n                    if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n                        offset = 0;\n                    } else {\n                        offset = eventStart.diff(weekViewStart, 'days');\n                    }\n                    if (eventEnd.isAfter(weekViewEnd)) {\n                        eventEnd = weekViewEnd;\n                    }\n                    if (eventStart.isBefore(weekViewStart)) {\n                        eventStart = weekViewStart;\n                    }\n                    span = moment(eventEnd).diff(eventStart, 'days') + 1;\n                    event.daySpan = span;\n                    event.dayOffset = offset;\n                    return event;\n                });\n                return {\n                    columns: columns,\n                    events: eventsSorted\n                };\n            };\n            this.getDayView = function (events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n                var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n                var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n                var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n                var dayHeightMultiplier = dayHeight / 60;\n                var buckets = [];\n                return eventsInPeriod.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n                }).map(function (event) {\n                    if (moment(event.starts_at).isBefore(calendarStart)) {\n                        event.top = 0;\n                    } else {\n                        event.top = moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier - 2;\n                    }\n                    if (moment(event.ends_at).isAfter(calendarEnd)) {\n                        event.height = calendarHeight - event.top;\n                    } else {\n                        var diffStart = event.starts_at;\n                        if (moment(event.starts_at).isBefore(calendarStart)) {\n                            diffStart = calendarStart.toDate();\n                        }\n                        event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n                    }\n                    if (event.top - event.height > calendarHeight) {\n                        event.height = 0;\n                    }\n                    event.left = 0;\n                    return event;\n                }).filter(function (event) {\n                    return event.height > 0;\n                }).map(function (event) {\n                    var cannotFitInABucket = true;\n                    buckets.forEach(function (bucket, bucketIndex) {\n                        var canFitInThisBucket = true;\n                        bucket.forEach(function (bucketItem) {\n                            if (self.eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) || self.eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n                                canFitInThisBucket = false;\n                            }\n                        });\n                        if (canFitInThisBucket && cannotFitInABucket) {\n                            cannotFitInABucket = false;\n                            event.left = bucketIndex * 150;\n                            buckets[bucketIndex].push(event);\n                        }\n                    });\n                    if (cannotFitInABucket) {\n                        event.left = buckets.length * 150;\n                        buckets.push([event]);\n                    }\n                    return event;\n                });\n            };\n            this.toggleEventBreakdown = function (view, rowIndex, cellIndex) {\n                var openEvents = [];\n                function closeAllOpenItems() {\n                    view = view.map(function (row) {\n                        row.isOpened = false;\n                        return row.map(function (cell) {\n                            cell.isOpened = false;\n                            return cell;\n                        });\n                    });\n                }\n                if (view[rowIndex][cellIndex].events.length > 0) {\n                    var isCellOpened = view[rowIndex][cellIndex].isOpened;\n                    closeAllOpenItems();\n                    view[rowIndex][cellIndex].isOpened = !isCellOpened;\n                    view[rowIndex].isOpened = !isCellOpened;\n                    openEvents = view[rowIndex][cellIndex].events;\n                } else {\n                    closeAllOpenItems();\n                }\n                return {\n                    view: view,\n                    openEvents: openEvents\n                };\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').provider('calendarConfig', function () {\n        var defaultDateFormats = {\n            hour: 'ha',\n            day: 'D MMM',\n            month: 'MMMM',\n            weekDay: 'dddd'\n        };\n        var defaultTitleFormats = {\n            day: 'dddd D MMMM, YYYY',\n            week: 'Week {week} of {year}',\n            month: 'MMMM YYYY',\n            year: 'YYYY'\n        };\n        var configProvider = this;\n        configProvider.configureDateFormats = function (formats) {\n            angular.extend(defaultDateFormats, formats);\n            return configProvider;\n        };\n        configProvider.configureTitleFormats = function (formats) {\n            angular.extend(defaultTitleFormats, formats);\n            return configProvider;\n        };\n        configProvider.$get = function () {\n            return {\n                dateFormats: defaultDateFormats,\n                titleFormats: defaultTitleFormats\n            };\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('truncateEventTitle', function () {\n        return function (string, length, boxHeight) {\n            if (!string) {\n                return '';\n            }\n            //Only truncate if if actually needs truncating\n            if (string.length >= length && string.length / 20 > boxHeight / 30) {\n                return string.substr(0, length) + '...';\n            } else {\n                return string;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('eventCountBadgeTotal', function () {\n        return function (events) {\n            return events.filter(function (event) {\n                return event.incrementsBadgeTotal !== false;\n            }).length;\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCollapseFallback', [\n        '$injector',\n        function ($injector) {\n            if ($injector.has('collapseDirective')) {\n                return {};\n            }\n            return {\n                restrict: 'A',\n                controller: [\n                    '$scope',\n                    '$attrs',\n                    '$element',\n                    function ($scope, $attrs, $element) {\n                        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function (shouldCollapse) {\n                            if (shouldCollapse) {\n                                $element.addClass('ng-hide');\n                            } else {\n                                $element.removeClass('ng-hide');\n                            }\n                        });\n                        var unbindDestroy = $scope.$on('$destroy', function () {\n                            unbindDestroy();\n                            unbindWatcher();\n                        });\n                    }\n                ]\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarYear', [\n        'moment',\n        function (moment) {\n            return {\n                templateUrl: 'templates/year.html',\n                restrict: 'EA',\n                require: '^mwlCalendar',\n                scope: {\n                    events: '=calendarEvents',\n                    currentDay: '=calendarCurrentDay',\n                    eventClick: '=calendarEventClick',\n                    eventEditClick: '=calendarEditEventClick',\n                    eventDeleteClick: '=calendarDeleteEventClick',\n                    editEventHtml: '=calendarEditEventHtml',\n                    deleteEventHtml: '=calendarDeleteEventHtml',\n                    autoOpen: '=calendarAutoOpen',\n                    timespanClick: '=calendarTimespanClick'\n                },\n                controller: [\n                    '$scope',\n                    '$sce',\n                    '$timeout',\n                    'calendarHelper',\n                    'eventCountBadgeTotalFilter',\n                    function ($scope, $sce, $timeout, calendarHelper, eventCountBadgeTotalFilter) {\n                        var firstRun = false;\n                        $scope.$sce = $sce;\n                        $scope.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                        function updateView() {\n                            $scope.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n                            //Auto open the calendar to the current day if set\n                            if ($scope.autoOpen && !firstRun) {\n                                $scope.view.forEach(function (row, rowIndex) {\n                                    row.forEach(function (year, cellIndex) {\n                                        if (moment($scope.currentDay).startOf('month').isSame(year.date)) {\n                                            $scope.monthClicked(rowIndex, cellIndex, true);\n                                            $timeout(function () {\n                                                firstRun = false;\n                                            });\n                                        }\n                                    });\n                                });\n                            }\n                        }\n                        $scope.$watch('currentDay', updateView);\n                        $scope.$watch('events', updateView, true);\n                        $scope.monthClicked = function (yearIndex, monthIndex, monthClickedFirstRun) {\n                            if (!monthClickedFirstRun) {\n                                $scope.timespanClick({ calendarDate: $scope.view[yearIndex][monthIndex].date.startOf('month').toDate() });\n                            }\n                            var handler = calendarHelper.toggleEventBreakdown($scope.view, yearIndex, monthIndex);\n                            $scope.view = handler.view;\n                            $scope.openEvents = handler.openEvents;\n                        };\n                        $scope.drillDown = function (month) {\n                            var date = moment($scope.currentDay).clone().month(month).toDate();\n                            if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                                $scope.calendarCtrl.changeView('month', date);\n                            }\n                        };\n                    }\n                ],\n                link: function (scope, element, attrs, calendarCtrl) {\n                    scope.calendarCtrl = calendarCtrl;\n                }\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarWeek', function () {\n        return {\n            templateUrl: 'templates/week.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                useIsoWeek: '=calendarUseIsoWeek',\n                timespanClick: '=calendarTimespanClick'\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                function ($scope, moment, calendarHelper) {\n                    function updateView() {\n                        $scope.view = calendarHelper.getWeekView($scope.events, $scope.currentDay, $scope.useIsoWeek);\n                    }\n                    $scope.drillDown = function (day) {\n                        var date = moment($scope.currentDay).clone().date(day).toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            $scope.calendarCtrl.changeView('day', date);\n                        }\n                    };\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                }\n            ],\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarSlideBox', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'templates/calendarSlideBox.html',\n            replace: true,\n            controller: [\n                '$scope',\n                '$attrs',\n                function ($scope, $attrs) {\n                    var unbindWatcher = $scope.$watch($attrs.isOpen, function (shouldCollapse) {\n                        $scope.shouldCollapse = shouldCollapse;\n                    });\n                    var unbindDestroy = $scope.$on('$destroy', function () {\n                        unbindDestroy();\n                        unbindWatcher();\n                    });\n                }\n            ],\n            require: [\n                '^?mwlCalendarMonth',\n                '^?mwlCalendarYear'\n            ],\n            link: function (scope, elm, attrs, ctrls) {\n                scope.isMonthView = !!ctrls[0];\n                scope.isYearView = !!ctrls[1];\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarMonth', function () {\n        return {\n            templateUrl: 'templates/month.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                eventEditClick: '=calendarEditEventClick',\n                eventDeleteClick: '=calendarDeleteEventClick',\n                editEventHtml: '=calendarEditEventHtml',\n                deleteEventHtml: '=calendarDeleteEventHtml',\n                autoOpen: '=calendarAutoOpen',\n                useIsoWeek: '=calendarUseIsoWeek',\n                timespanClick: '=calendarTimespanClick'\n            },\n            controller: [\n                '$scope',\n                '$sce',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'eventCountBadgeTotalFilter',\n                function ($scope, $sce, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter) {\n                    var firstRun = false;\n                    $scope.$sce = $sce;\n                    $scope.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                    function updateView() {\n                        $scope.view = calendarHelper.getMonthView($scope.events, $scope.currentDay, $scope.useIsoWeek);\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && !firstRun) {\n                            $scope.view.forEach(function (week, rowIndex) {\n                                week.forEach(function (day, cellIndex) {\n                                    if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date.startOf('day'))) {\n                                        $scope.dayClicked(rowIndex, cellIndex, true);\n                                        $timeout(function () {\n                                            firstRun = false;\n                                        });\n                                    }\n                                });\n                            });\n                        }\n                    }\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                    $scope.weekDays = calendarHelper.getWeekDayNames(false, $scope.useIsoWeek);\n                    $scope.dayClicked = function (rowIndex, cellIndex, dayClickedFirstRun) {\n                        if (!dayClickedFirstRun) {\n                            $scope.timespanClick({ calendarDate: $scope.view[rowIndex][cellIndex].date.startOf('day').toDate() });\n                        }\n                        var handler = calendarHelper.toggleEventBreakdown($scope.view, rowIndex, cellIndex);\n                        $scope.view = handler.view;\n                        $scope.openEvents = handler.openEvents;\n                    };\n                    $scope.drillDown = function (day) {\n                        var date = moment($scope.currentDay).clone().date(day).toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            $scope.calendarCtrl.changeView('day', date);\n                        }\n                    };\n                    $scope.highlightEvent = function (event, shouldAddClass) {\n                        $scope.view.forEach(function (week) {\n                            week.forEach(function (day) {\n                                delete day.highlightClass;\n                                if (shouldAddClass) {\n                                    var dayContainsEvent = day.events.filter(function (e) {\n                                        return e.$id === event.$id;\n                                    }).length > 0;\n                                    if (dayContainsEvent) {\n                                        day.highlightClass = 'day-highlight dh-event-' + event.type;\n                                    }\n                                }\n                            });\n                        });\n                    };\n                }\n            ],\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarDay', function () {\n        return {\n            templateUrl: 'templates/day.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                eventLabel: '@calendarEventLabel',\n                timeLabel: '@calendarTimeLabel',\n                dayViewStart: '@calendarDayViewStart',\n                dayViewEnd: '@calendarDayViewEnd',\n                dayViewSplit: '@calendarDayViewSplit'\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                'calendarConfig',\n                function ($scope, moment, calendarHelper, calendarConfig) {\n                    var dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n                    var dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n                    $scope.dayViewSplit = parseInt($scope.dayViewSplit);\n                    $scope.dayHeight = 60 / $scope.dayViewSplit * 30;\n                    $scope.days = [];\n                    var dayCounter = moment(dayViewStart);\n                    for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n                        $scope.days.push({ label: dayCounter.format(calendarConfig.dateFormats.hour) });\n                        dayCounter.add(1, 'hour');\n                    }\n                    function updateView() {\n                        $scope.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), $scope.dayHeight);\n                    }\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                }\n            ]\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendar', function () {\n        return {\n            templateUrl: 'templates/main.html',\n            restrict: 'EA',\n            scope: {\n                events: '=calendarEvents',\n                view: '=calendarView',\n                currentDay: '=calendarCurrentDay',\n                control: '=calendarControl',\n                eventClick: '&calendarEventClick',\n                eventEditClick: '&calendarEditEventClick',\n                eventDeleteClick: '&calendarDeleteEventClick',\n                editEventHtml: '=calendarEditEventHtml',\n                deleteEventHtml: '=calendarDeleteEventHtml',\n                autoOpen: '=calendarAutoOpen',\n                useIsoWeek: '=calendarUseIsoWeek',\n                eventLabel: '@calendarEventLabel',\n                timeLabel: '@calendarTimeLabel',\n                dayViewStart: '@calendarDayViewStart',\n                dayViewEnd: '@calendarDayViewEnd',\n                weekTitleLabel: '@calendarWeekTitleLabel',\n                timespanClick: '&calendarTimespanClick',\n                dayViewSplit: '@calendarDayViewSplit'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarConfig',\n                function ($scope, $timeout, moment, calendarConfig) {\n                    var self = this;\n                    var weekTitleLabel = $scope.weekTitleLabel || calendarConfig.titleFormats.week;\n                    this.titleFunctions = {\n                        day: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.day);\n                        },\n                        week: function (currentDay) {\n                            return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n                        },\n                        month: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.month);\n                        },\n                        year: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.year);\n                        }\n                    };\n                    this.changeView = function (view, newDay) {\n                        $scope.view = view;\n                        $scope.currentDay = newDay;\n                    };\n                    $scope.control = $scope.control || {};\n                    $scope.control.prev = function () {\n                        $scope.currentDay = moment($scope.currentDay).subtract(1, $scope.view).toDate();\n                    };\n                    $scope.control.next = function () {\n                        $scope.currentDay = moment($scope.currentDay).add(1, $scope.view).toDate();\n                    };\n                    $scope.control.getTitle = function () {\n                        if (!self.titleFunctions[$scope.view]) {\n                            return '';\n                        }\n                        return self.titleFunctions[$scope.view]($scope.currentDay);\n                    };\n                    //Auto update the calendar when the locale changes\n                    var firstRunWatcher = true;\n                    var unbindWatcher = $scope.$watch(function () {\n                        return moment.locale();\n                    }, function () {\n                        if (firstRunWatcher) {\n                            //dont run the first time the calendar is initialised\n                            firstRunWatcher = false;\n                            return;\n                        }\n                        var originalView = angular.copy($scope.view);\n                        $scope.view = 'redraw';\n                        $timeout(function () {\n                            //bit of a hacky way to redraw the calendar, should be refactored at some point\n                            $scope.view = originalView;\n                        });\n                    });\n                    //Remove the watcher when the calendar is destroyed\n                    var unbindDestroyListener = $scope.$on('$destroy', function () {\n                        unbindDestroyListener();\n                        unbindWatcher();\n                    });\n                }\n            ]\n        };\n    });\n}(window, angular));","'use strict';\n\nangular.module('mwl.calendar', []);\n","'use strict';\n\n/**\n * @ngdoc service\n * @name angularBootstrapCalendarApp.moment\n * @description\n * # moment\n * Constant in the angularBootstrapCalendarApp.\n */\nangular.module('mwl.calendar')\n  .constant('moment', window.moment);\n","'use strict';\n\n/**\n * @ngdoc service\n * @name angularBootstrapCalendarApp.calendarHelper\n * @description\n * # calendarHelper\n * Service in the angularBootstrapCalendarApp.\n */\nangular.module('mwl.calendar')\n  .service('calendarHelper', function (moment, calendarConfig) {\n\n    var self = this;\n\n    function isISOWeekBasedOnLocale() {\n      return moment().startOf('week').day() === 1;\n    }\n\n    function isISOWeek(userValue) {\n      //If a manual override has been set in the directive, use that\n      if (angular.isDefined(userValue)) {\n        return userValue;\n      }\n      //Otherwise fallback to the locale\n      return isISOWeekBasedOnLocale();\n    }\n\n    function getEventsInPeriod(calendarDate, period, allEvents) {\n      var startPeriod = moment(calendarDate).startOf(period);\n      var endPeriod = moment(calendarDate).endOf(period);\n      return allEvents.filter(function(event) {\n        return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n      });\n    }\n\n    this.getMonthNames = function() {\n\n      var months = [];\n      for (var i = 0; i <= 11; i++) {\n        months.push(moment(new Date(2014, i)).format(calendarConfig.dateFormats.month));\n      }\n\n      return months;\n\n    };\n\n    this.getWeekDayNames = function(short, useISOWeek) {\n\n      var weekdays = [];\n      var startDay = isISOWeek(useISOWeek) ? 22 : 21;\n      for (var i = 0; i <= 6; i++) {\n        weekdays.push(moment(new Date(2014, 8, startDay + i)).format(calendarConfig.dateFormats.weekDay));\n      }\n\n      return weekdays;\n\n    };\n\n    this.eventIsInPeriod = function(eventStart, eventEnd, periodStart, periodEnd) {\n\n      eventStart = moment(eventStart);\n      eventEnd = moment(eventEnd);\n      periodStart = moment(periodStart);\n      periodEnd = moment(periodEnd);\n\n      return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n        (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n        (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n        eventStart.isSame(periodStart) ||\n        eventEnd.isSame(periodEnd);\n\n    };\n\n    this.getYearView = function(events, currentDay) {\n\n      var grid = [];\n      var months = self.getMonthNames();\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n\n      for (var i = 0; i < 3; i++) {\n        var row = [];\n        for (var j = 0; j < 4; j++) {\n          var monthIndex = 12 - months.length;\n          var startPeriod = new Date(moment(currentDay).format('YYYY'), monthIndex, 1);\n          var endPeriod = moment(startPeriod).add(1, 'month').subtract(1, 'second').toDate();\n\n          row.push({\n            label: months.shift(),\n            monthIndex: monthIndex,\n            isToday: moment(startPeriod).startOf('month').isSame(moment().startOf('month')),\n            events: eventsInPeriod.filter(function(event) {\n              return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n            }),\n            date: moment(startPeriod).startOf('month')\n          });\n        }\n        grid.push(row);\n      }\n\n      return grid;\n\n    };\n\n    this.getMonthView = function(events, currentDay, useISOWeek) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n\n      var dateOffset = isISOWeek(useISOWeek) ? 1 : 0;\n\n      var startOfMonth = moment(currentDay).startOf('month');\n      var numberOfDaysInMonth = moment(currentDay).endOf('month').date();\n\n      var grid = [];\n      var buildRow = new Array(7);\n      var eventsWithIds = eventsInPeriod.map(function(event, index) {\n        event.$id = index;\n        return event;\n      });\n\n      function getWeekDayIndex() {\n        var day = startOfMonth.day() - dateOffset;\n        if (day < 0) {\n          day = 6;\n        }\n        return day;\n      }\n\n      for (var i = 1; i <= numberOfDaysInMonth; i++) {\n\n        if (i === 1) {\n          var weekdayIndex = getWeekDayIndex(startOfMonth);\n          var prefillMonth = startOfMonth.clone();\n          while (weekdayIndex > 0) {\n            weekdayIndex--;\n            prefillMonth = prefillMonth.subtract(1, 'day');\n            buildRow[weekdayIndex] = {\n              label: prefillMonth.date(),\n              date: prefillMonth.clone(),\n              inMonth: false,\n              isPast: moment().startOf('day').isAfter(prefillMonth),\n              isToday: moment().startOf('day').isSame(prefillMonth),\n              isFuture: moment().startOf('day').isBefore(prefillMonth),\n              events: []\n            };\n          }\n        }\n\n        buildRow[getWeekDayIndex(startOfMonth)] = {\n          label: startOfMonth.date(),\n          inMonth: true,\n          isPast: moment().startOf('day').isAfter(startOfMonth),\n          isToday: moment().startOf('day').isSame(startOfMonth),\n          isFuture: moment().startOf('day').isBefore(startOfMonth),\n          isWeekend: [0, 6].indexOf(moment(startOfMonth).day()) > -1,\n          date: startOfMonth.clone(),\n          events: eventsWithIds.filter(function(event) {\n            return self.eventIsInPeriod(event.starts_at, event.ends_at, startOfMonth.clone().startOf('day'), startOfMonth.clone().endOf('day'));\n          })\n        };\n\n        if (i === numberOfDaysInMonth) {\n          weekdayIndex = getWeekDayIndex(startOfMonth);\n          var postfillMonth = startOfMonth.clone();\n          while (weekdayIndex < 6) {\n            weekdayIndex++;\n            postfillMonth = postfillMonth.add(1, 'day');\n            buildRow[weekdayIndex] = {\n              label: postfillMonth.date(),\n              date: postfillMonth.clone(),\n              inMonth: false,\n              isPast: moment().startOf('day').isAfter(postfillMonth),\n              isToday: moment().startOf('day').isSame(postfillMonth),\n              isFuture: moment().startOf('day').isBefore(postfillMonth),\n              events: []\n            };\n          }\n        }\n\n        if (getWeekDayIndex(startOfMonth) === 6 || i === numberOfDaysInMonth) {\n          grid.push(buildRow);\n          buildRow = new Array(7);\n        }\n\n        startOfMonth = startOfMonth.add(1, 'day');\n\n      }\n\n      return grid;\n\n    };\n\n    this.getWeekView = function(events, currentDay, useISOWeek) {\n\n      var dateOffset = isISOWeek(useISOWeek) ? 1 : 0;\n      var columns = new Array(7);\n      var weekDays = self.getWeekDayNames(false, useISOWeek);\n      var currentWeekDayIndex = currentDay.getDay();\n      var beginningOfWeek, endOfWeek, i, date;\n\n      for (i = currentWeekDayIndex; i >= 0; i--) {\n        date = moment(currentDay).subtract(currentWeekDayIndex - i, 'days').add(dateOffset, 'day').toDate();\n        columns[i] = {\n          weekDay: weekDays[i],\n          day: moment(date).format('D'),\n          date: moment(date).format(calendarConfig.dateFormats.day),\n          isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n          isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n          isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n          isWeekend: [0, 6].indexOf(moment(date).day()) > -1\n        };\n        if (i === 0) {\n          beginningOfWeek = date;\n        } else if (i === 6) {\n          endOfWeek = date;\n        }\n      }\n\n      for (i = currentWeekDayIndex + 1; i < 7; i++) {\n        date = moment(currentDay).add(i - currentWeekDayIndex, 'days').add(dateOffset, 'day').toDate();\n        columns[i] = {\n          weekDay: weekDays[i],\n          day: moment(date).format('D'),\n          date: moment(date).format(calendarConfig.dateFormats.day),\n          isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n          isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n          isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n          isWeekend: [0, 6].indexOf(moment(date).day()) > -1\n        };\n        if (i === 0) {\n          beginningOfWeek = date;\n        } else if (i === 6) {\n          endOfWeek = date;\n        }\n      }\n\n      endOfWeek = moment(endOfWeek).endOf('day').toDate();\n      beginningOfWeek = moment(beginningOfWeek).startOf('day').toDate();\n\n      var eventsSorted = events.filter(function(event) {\n        return self.eventIsInPeriod(event.starts_at, event.ends_at, beginningOfWeek, endOfWeek);\n      }).map(function(event) {\n\n        var eventStart = moment(event.starts_at).startOf('day');\n        var eventEnd = moment(event.ends_at).startOf('day');\n        var weekViewStart = moment(beginningOfWeek).startOf('day');\n        var weekViewEnd = moment(endOfWeek).startOf('day');\n\n        var offset, span;\n\n        if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n          offset = 0;\n        } else {\n          offset = eventStart.diff(weekViewStart, 'days');\n        }\n\n        if (eventEnd.isAfter(weekViewEnd)) {\n          eventEnd = weekViewEnd;\n        }\n\n        if (eventStart.isBefore(weekViewStart)) {\n          eventStart = weekViewStart;\n        }\n\n        span = moment(eventEnd).diff(eventStart, 'days') + 1;\n\n        event.daySpan = span;\n        event.dayOffset = offset;\n        return event;\n      });\n\n      return {columns: columns, events: eventsSorted};\n\n    };\n\n    this.getDayView = function(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n      var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n      var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n      var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n      var dayHeightMultiplier = dayHeight / 60;\n      var buckets = [];\n\n      return eventsInPeriod.filter(function(event) {\n        return self.eventIsInPeriod(event.starts_at, event.ends_at, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n      }).map(function(event) {\n        if (moment(event.starts_at).isBefore(calendarStart)) {\n          event.top = 0;\n        } else {\n          event.top = (moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier) - 2;\n        }\n\n        if (moment(event.ends_at).isAfter(calendarEnd)) {\n          event.height = calendarHeight - event.top;\n        } else {\n          var diffStart = event.starts_at;\n          if (moment(event.starts_at).isBefore(calendarStart)) {\n            diffStart = calendarStart.toDate();\n          }\n          event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n        }\n\n        if (event.top - event.height > calendarHeight) {\n          event.height = 0;\n        }\n\n        event.left = 0;\n\n        return event;\n      }).filter(function(event) {\n        return event.height > 0;\n      }).map(function(event) {\n\n        var cannotFitInABucket = true;\n        buckets.forEach(function(bucket, bucketIndex) {\n          var canFitInThisBucket = true;\n\n          bucket.forEach(function(bucketItem) {\n            if (self.eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) || self.eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n              canFitInThisBucket = false;\n            }\n          });\n\n          if (canFitInThisBucket && cannotFitInABucket) {\n            cannotFitInABucket = false;\n            event.left = bucketIndex * 150;\n            buckets[bucketIndex].push(event);\n          }\n\n        });\n\n        if (cannotFitInABucket) {\n          event.left = buckets.length * 150;\n          buckets.push([event]);\n        }\n\n        return event;\n\n      });\n\n    };\n\n    this.toggleEventBreakdown = function(view, rowIndex, cellIndex) {\n\n      var openEvents = [];\n\n      function closeAllOpenItems() {\n        view = view.map(function(row) {\n          row.isOpened = false;\n          return row.map(function(cell) {\n            cell.isOpened = false;\n            return cell;\n          });\n        });\n      }\n\n      if (view[rowIndex][cellIndex].events.length > 0) {\n\n        var isCellOpened = view[rowIndex][cellIndex].isOpened;\n\n        closeAllOpenItems();\n\n        view[rowIndex][cellIndex].isOpened = !isCellOpened;\n        view[rowIndex].isOpened = !isCellOpened;\n        openEvents = view[rowIndex][cellIndex].events;\n      } else {\n        closeAllOpenItems();\n      }\n\n      return {view: view, openEvents: openEvents};\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mwl.calendar')\n  .provider('calendarConfig', function() {\n\n    var defaultDateFormats = {\n      hour: 'ha',\n      day: 'D MMM',\n      month: 'MMMM',\n      weekDay: 'dddd'\n    };\n\n    var defaultTitleFormats = {\n      day: 'dddd D MMMM, YYYY',\n      week: 'Week {week} of {year}',\n      month: 'MMMM YYYY',\n      year: 'YYYY'\n    };\n\n    var configProvider = this;\n\n    configProvider.configureDateFormats = function(formats) {\n      angular.extend(defaultDateFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.configureTitleFormats = function(formats) {\n      angular.extend(defaultTitleFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.$get = function() {\n      return {\n        dateFormats: defaultDateFormats,\n        titleFormats: defaultTitleFormats\n      };\n    };\n\n  });\n","'use strict';\n\nangular.module('mwl.calendar')\n  .filter('truncateEventTitle', function() {\n\n    return function(string, length, boxHeight) {\n      if (!string) {\n        return '';\n      }\n\n      //Only truncate if if actually needs truncating\n      if (string.length >= length && string.length / 20 > boxHeight / 30) {\n        return string.substr(0, length) + '...';\n      } else {\n        return string;\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mwl.calendar')\n  .filter('eventCountBadgeTotal', function() {\n\n    return function(events) {\n\n      return events.filter(function(event) {\n        return event.incrementsBadgeTotal !== false;\n      }).length;\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCollapseFallback', function($injector) {\n\n    if ($injector.has('collapseDirective')) {\n      return {};\n    }\n\n    return {\n      restrict: 'A',\n      controller: function($scope, $attrs, $element) {\n        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function(shouldCollapse) {\n          if (shouldCollapse) {\n            $element.addClass('ng-hide');\n          } else {\n            $element.removeClass('ng-hide');\n          }\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarYear', function(moment) {\n\n    return {\n      templateUrl: 'templates/year.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventEditClick: '=calendarEditEventClick',\n        eventDeleteClick: '=calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, $sce, $timeout, calendarHelper, eventCountBadgeTotalFilter) {\n        var firstRun = false;\n\n        $scope.$sce = $sce;\n        $scope.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        function updateView() {\n          $scope.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && !firstRun) {\n            $scope.view.forEach(function(row, rowIndex) {\n              row.forEach(function(year, cellIndex) {\n                if (moment($scope.currentDay).startOf('month').isSame(year.date)) {\n                  $scope.monthClicked(rowIndex, cellIndex, true);\n                  $timeout(function() {\n                    firstRun = false;\n                  });\n                }\n              });\n            });\n          }\n        }\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        $scope.monthClicked = function(yearIndex, monthIndex, monthClickedFirstRun) {\n\n          if (!monthClickedFirstRun) {\n            $scope.timespanClick({calendarDate: $scope.view[yearIndex][monthIndex].date.startOf('month').toDate()});\n          }\n\n          var handler = calendarHelper.toggleEventBreakdown($scope.view, yearIndex, monthIndex);\n          $scope.view = handler.view;\n          $scope.openEvents = handler.openEvents;\n\n        };\n\n        $scope.drillDown = function(month) {\n          var date = moment($scope.currentDay).clone().month(month).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            $scope.calendarCtrl.changeView('month', date);\n          }\n        };\n      },\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarWeek', function() {\n\n    return {\n      templateUrl: 'templates/week.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        useIsoWeek: '=calendarUseIsoWeek',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, moment, calendarHelper) {\n        function updateView() {\n          $scope.view = calendarHelper.getWeekView($scope.events, $scope.currentDay, $scope.useIsoWeek);\n        }\n\n        $scope.drillDown = function(day) {\n          var date = moment($scope.currentDay).clone().date(day).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            $scope.calendarCtrl.changeView('day', date);\n          }\n        };\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n      },\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarSlideBox', function() {\n\n    return {\n      restrict: 'EA',\n      templateUrl: 'templates/calendarSlideBox.html',\n      replace: true,\n      controller: function($scope, $attrs) {\n        var unbindWatcher = $scope.$watch($attrs.isOpen, function(shouldCollapse) {\n          $scope.shouldCollapse = shouldCollapse;\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      },\n      require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n      link: function(scope, elm, attrs, ctrls) {\n        scope.isMonthView = !!ctrls[0];\n        scope.isYearView = !!ctrls[1];\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarMonth', function() {\n\n    return {\n      templateUrl: 'templates/month.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventEditClick: '=calendarEditEventClick',\n        eventDeleteClick: '=calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        useIsoWeek: '=calendarUseIsoWeek',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, $sce, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter) {\n        var firstRun = false;\n\n        $scope.$sce = $sce;\n        $scope.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        function updateView() {\n          $scope.view = calendarHelper.getMonthView($scope.events, $scope.currentDay, $scope.useIsoWeek);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && !firstRun) {\n            $scope.view.forEach(function(week, rowIndex) {\n              week.forEach(function(day, cellIndex) {\n                if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date.startOf('day'))) {\n                  $scope.dayClicked(rowIndex, cellIndex, true);\n                  $timeout(function() {\n                    firstRun = false;\n                  });\n                }\n              });\n            });\n          }\n\n        }\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        $scope.weekDays = calendarHelper.getWeekDayNames(false, $scope.useIsoWeek);\n\n        $scope.dayClicked = function(rowIndex, cellIndex, dayClickedFirstRun) {\n\n          if (!dayClickedFirstRun) {\n            $scope.timespanClick({calendarDate: $scope.view[rowIndex][cellIndex].date.startOf('day').toDate()});\n          }\n\n          var handler = calendarHelper.toggleEventBreakdown($scope.view, rowIndex, cellIndex);\n          $scope.view = handler.view;\n          $scope.openEvents = handler.openEvents;\n\n        };\n\n        $scope.drillDown = function(day) {\n          var date = moment($scope.currentDay).clone().date(day).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            $scope.calendarCtrl.changeView('day', date);\n          }\n        };\n\n        $scope.highlightEvent = function(event, shouldAddClass) {\n\n          $scope.view.forEach(function(week) {\n\n            week.forEach(function(day) {\n\n              delete day.highlightClass;\n\n              if (shouldAddClass) {\n                var dayContainsEvent = day.events.filter(function(e) {\n                  return e.$id === event.$id;\n                }).length > 0;\n\n                if (dayContainsEvent) {\n                  day.highlightClass = 'day-highlight dh-event-' + event.type;\n                }\n              }\n\n            });\n\n          });\n\n        };\n      },\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarDay', function() {\n\n    return {\n      templateUrl: 'templates/day.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventLabel: '@calendarEventLabel',\n        timeLabel: '@calendarTimeLabel',\n        dayViewStart: '@calendarDayViewStart',\n        dayViewEnd: '@calendarDayViewEnd',\n        dayViewSplit: '@calendarDayViewSplit'\n      },\n      controller: function($scope, moment, calendarHelper, calendarConfig) {\n\n        var dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n        var dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n\n        $scope.dayViewSplit = parseInt($scope.dayViewSplit);\n        $scope.dayHeight = (60 / $scope.dayViewSplit) * 30;\n\n        $scope.days = [];\n        var dayCounter = moment(dayViewStart);\n        for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n          $scope.days.push({\n            label: dayCounter.format(calendarConfig.dateFormats.hour)\n          });\n          dayCounter.add(1, 'hour');\n        }\n\n        function updateView() {\n          $scope.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), $scope.dayHeight);\n        }\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendar', function() {\n\n    return {\n      templateUrl: 'templates/main.html',\n      restrict: 'EA',\n      scope: {\n        events: '=calendarEvents',\n        view: '=calendarView',\n        currentDay: '=calendarCurrentDay',\n        control: '=calendarControl',\n        eventClick: '&calendarEventClick',\n        eventEditClick: '&calendarEditEventClick',\n        eventDeleteClick: '&calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        useIsoWeek: '=calendarUseIsoWeek',\n        eventLabel: '@calendarEventLabel',\n        timeLabel: '@calendarTimeLabel',\n        dayViewStart: '@calendarDayViewStart',\n        dayViewEnd: '@calendarDayViewEnd',\n        weekTitleLabel: '@calendarWeekTitleLabel',\n        timespanClick: '&calendarTimespanClick',\n        dayViewSplit: '@calendarDayViewSplit'\n      },\n      controller: function($scope, $timeout, moment, calendarConfig) {\n\n        var self = this;\n\n        var weekTitleLabel = $scope.weekTitleLabel || calendarConfig.titleFormats.week;\n        this.titleFunctions = {\n          day: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.day);\n          },\n          week: function(currentDay) {\n            return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n          },\n          month: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.month);\n          },\n          year: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.year);\n          }\n        };\n\n        this.changeView = function(view, newDay) {\n          $scope.view = view;\n          $scope.currentDay = newDay;\n        };\n\n        $scope.control = $scope.control || {};\n\n        $scope.control.prev = function() {\n          $scope.currentDay = moment($scope.currentDay).subtract(1, $scope.view).toDate();\n        };\n\n        $scope.control.next = function() {\n          $scope.currentDay = moment($scope.currentDay).add(1, $scope.view).toDate();\n        };\n\n        $scope.control.getTitle = function() {\n          if (!self.titleFunctions[$scope.view]) {\n            return '';\n          }\n          return self.titleFunctions[$scope.view]($scope.currentDay);\n        };\n\n        //Auto update the calendar when the locale changes\n        var firstRunWatcher = true;\n        var unbindWatcher = $scope.$watch(function() {\n          return moment.locale();\n        }, function() {\n          if (firstRunWatcher) { //dont run the first time the calendar is initialised\n            firstRunWatcher = false;\n            return;\n          }\n          var originalView = angular.copy($scope.view);\n          $scope.view = 'redraw';\n          $timeout(function() { //bit of a hacky way to redraw the calendar, should be refactored at some point\n            $scope.view = originalView;\n          });\n        });\n\n        //Remove the watcher when the calendar is destroyed\n        var unbindDestroyListener = $scope.$on('$destroy', function() {\n          unbindDestroyListener();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}